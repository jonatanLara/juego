/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Games.Memoria;

import java.awt.Color;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Timer;

/**
 *
 * @author jonatanLara
 */
public class CuentaRegresiva extends javax.swing.JDialog {
        Timer Reloj;
        int segundos;
        int copiaSegundos;// Para recordar los segundos en caso de reiniciar la cuenta regresiva.
        int delay = 1000; // Cada cúantos milisegundos nuestro Timer hará una acción,
     
        
    public CuentaRegresiva(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
       
        initComponents();
        setLocationRelativeTo(null);
       // setUndecorated(true);
        iniciar();
        
       /*
        //para que incie el conteo al mismo tiempo que el Dialogo.
        GameMemory inicioConteo = new GameMemory();
        inicioConteo.conteo();//llamo a conteo 
        */
    }
     
    private class HiloRegresaAtras extends Thread {
          @Override
          public void run() {
            try {
                // ESPERO 1 SEG 
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                 Logger.getLogger(CuentaRegresiva.class.getName()).log(Level.SEVERE, null, ex);
            }
            //selecion de mi primera carta
           
             // System.exit(0);
            dispose();
        }
    }
     public void iniciar(){
         segundos =10;
         copiaSegundos=segundos; // Para recordar cuántos segundos introducimos.
       
            ActionListener taskPerformer = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                Tiempo.setFont(new Font("HERCULANUM", Font.BOLD, 20));
                Tiempo.setForeground(new Color(102, 51, 0));
                Tiempo.setText("Quedan " + String.valueOf(segundos) + " segundos..."); 
                dialogos();
                if(segundos<=0) 
                {
                    Tiempo.setText("ha jugar!! "); // Muestra mensaje.
                    Toolkit.getDefaultToolkit().beep(); // Emite sonido.
                    Reloj.stop(); // Detiene el timer y se deja de ejecutar ésto.
                    HiloRegresaAtras hilo = new HiloRegresaAtras();
                    hilo.start();
                 }
                segundos--; // Reduce la cantidad de segundos.
                
            }
            
        }; // Fin de la declaración del ActionListener.
        
        // Creamos un nuevo Timer, indicando el retraso (delay),
        // y la acción a ejecutar, osea, taskPerformer(Arriba):
        Reloj = new Timer(delay, taskPerformer);
        Reloj.start(); // Empieza la ejecución del timer.
           
    }   
   public void dialogos(){
       Dialogo.setFont(new Font("HERCULANUM", Font.BOLD, 24));
       Dialogo.setForeground(new Color(102, 51, 0));
       if (segundos==8) {
           
           Dialogo.setText("Tienes 12 oportunidades ");
       }
       if (segundos==6) {
           Dialogo.setText("Tienes solo 60 seg ");
       }
       if (segundos==4) {
           Dialogo.setText("describre todas los pares ");
       }
       if (segundos==2) {
           Dialogo.setText("Bien ya es la hora ");
       }
   }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tiempo = new javax.swing.JLabel();
        Dialogo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        Tiempo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        Dialogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(Dialogo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Tiempo, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Dialogo, javax.swing.GroupLayout.DEFAULT_SIZE, 65, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Tiempo, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CuentaRegresiva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CuentaRegresiva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CuentaRegresiva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CuentaRegresiva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CuentaRegresiva dialog = new CuentaRegresiva(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Dialogo;
    private javax.swing.JLabel Tiempo;
    // End of variables declaration//GEN-END:variables
}
